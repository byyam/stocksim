{"name":"Stocksim","tagline":"","body":"stocksim\r\n========\r\n# Introduction\r\nThis is a simple Stock data simulator.\r\nThree parts:\r\n\r\n    1)Server: DataSim.\r\n    2)Connecter: PushPublish.\r\n    3)Client: SubscribeClient.\r\n\r\n   The DataSim generate stock data and push to the PushPublish.\r\n   The PushPublish send message to SubscribeClient.\r\n\r\n# Setup\r\n###Install Node.js\r\n\r\nDownload from website:\r\nhttp://nodejs.org/dist/v0.10.29/node-v0.10.29-linux-x64.tar.gz\r\n\r\n    $ tar -zxf node-v0.10.29-linux-x64.tar.gz\r\n    $ cd node-v0.10.29-linux-x64\r\n    $ ./configure --prefix=/node_installdir\r\n    $ make\r\n    $ make install\r\n\r\nSet environment path:\r\n$vim /etc/profile\r\nAdd these parameters to the end of /etc/profile:\r\n\r\n    export NODE_HOME=/node_installdir\r\n    export PATH=$PATH:$NODE_HOME/bin\r\n    export NODE_PATH=$NODE_HOME/lib/node_modules\r\n\r\n\r\n###Install ZeroMQ\r\nDownload from website:\r\nhttp://download.zeromq.org/zeromq-3.2.4.tar.gz\r\n\r\n    $ tar -zxf zeromq-3.2.4.tar.gz\r\n    $ cd zeromq-3.2.4\r\n    $ ./configure\r\n    $ make\r\n    $ make check\r\n    $ make install\r\n    $ ldconfig\r\n\r\n\r\n###Install ProtoBuf\r\nDownload from website:\r\nhttps://code.google.com/p/protobuf/downloads/detail?name=protobuf-2.5.0.tar.gz\r\n\r\n    $ tar -zxf protobuf-2.5.0.tar.gz\r\n    $ cd protobuf-2.5.0\r\n    $ ./configure --prefix=/protobuf_installdir\r\n    $ make\r\n    $ make check\r\n    $ make install\r\n\r\nSet environment path:\r\n\r\n    $ vim /etc/profile\r\n    \r\nAdd these parameters to the end of /etc/profile:\r\n\r\n    export PROTOBUF_HOME=/protobuf_installdir\r\n    export PATH=$PATH:$PROTOBUF_HOME/bin\r\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PROTOBUF_HOME/lib\r\n    export PKG_CONFIG_PATH=$PROTOBUF_HOME/lib/pkgconfig\r\n\r\n\r\n###Binding ZeroMQ with Node.js\r\nInstall ZeroMQ.Node:\r\n\r\n    $ npm install zmq -g\r\n\r\nNotice: npm install package depend on the internet connection. Another install method is:\r\nInstall from the source code:\r\nhttps://github.com/JustinTulloss/zeromq.node\r\n\r\n    $ cd zeromq.node-master\r\n    $ npm install\r\n    $ make \r\n    $ make test\r\n\r\nif ok.\r\nthen cp this whole directory to $NODE_HOME/lib/node_modules\r\n\r\n\r\n# Installation\r\n###Get StockSim source code\r\nClone StockSim repository from GitHub:\r\ngit@github.com:yeahzzz/stocksim.git\r\nor\r\nDownload from website:\r\nhttps://github.com/yeahzzz/stocksim\r\n\r\n###Generate ProtoBuf message format files\r\n\r\n    $ cd stocksim/MessageFormat\r\n    $ protoc -I=./ --cpp_out=../SubscribeClient ./message.proto\r\n\r\n###Compile out .so\r\n\r\n    $ cd stocksim/SubscribeClient\r\n    $ g++ libsub.cpp message.pb.cc -I$PROTOBUF_HOME/include -L$PROTOBUF_HOME/lib -lprotobuf -lzmq -pthread -fPIC -shared -o libsub.so\r\n\r\n###Build Client\r\n\r\n    $ cd stocksim/SubscribeClient\r\n    $ g++ client.cpp -L. -lsub -o client\r\n\r\n\r\n# Running\r\n###Start Server\r\n\r\n    $ cd stocksim/DataSim\r\n    $ python DataSim.py\r\n\r\n###Start Pusher\r\n\r\n    $ cd stocksim/PushPublish\r\n    $ node PushPublish.js\r\n\r\n###Start Client\r\n\r\n    $ cd stocksim/SubscribeClient\r\n    $ ./client\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}